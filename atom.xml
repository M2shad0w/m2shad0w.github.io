<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>m2shad0w</title>
  <subtitle>follow the wind</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://m2shad0w.com/"/>
  <updated>2016-11-10T10:38:55.000Z</updated>
  <id>http://m2shad0w.com/</id>
  
  <author>
    <name>Apollo Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动增量的hive-PARTITION实践</title>
    <link href="http://m2shad0w.com/2016/11/10/%E8%87%AA%E5%8A%A8%E5%A2%9E%E9%87%8F%E7%9A%84hive-PARTITION%E5%AE%9E%E8%B7%B5/"/>
    <id>http://m2shad0w.com/2016/11/10/自动增量的hive-PARTITION实践/</id>
    <published>2016-11-10T09:51:22.000Z</published>
    <updated>2016-11-10T10:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><p>所有的日志结构化，落地到 <code>HDFS</code> 之后，想着提供一个供运营查询的方式，上篇文章介绍了 facebook 的 <a href="http://m2shad0w.com/2016/11/09/presto-小试/index.html"><code>presto</code>链接</a>, 这篇就是数据源的自动化准备的一个过程。</p>
<a id="more"></a>
<h3 id="hive-创建外表与增加-partitions"><a href="#hive-创建外表与增加-partitions" class="headerlink" title="hive 创建外表与增加 partitions"></a>hive 创建外表与增加 partitions</h3><p>hive 可以创建外表与内表，创建内表的过程会从原来 <code>hdfs</code> 路径移动数据到 hive 的默认路径， 对于这些文件还要供 spark 等调用，期望是放在一个预先创建好的路径下，外表正符合要求。</p>
<p>创建外表<br>关键字 <code>external</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE external TABLE IF NOT EXISTS track_event ( id string, created_at string)</div><div class="line">LOCATION &apos;/user/root/external_table&apos;;</div></pre></td></tr></table></figure>
<p>这个过程 Hive 甚至不会校验外部表的目录是否存在。因此可以在创建表格的时候在加载数据。</p>
<p>如何将所有的日志放到一张表内，有能加速查询呢？</p>
<p>hive 有个 <code>PARTITIONED</code> 的设计</p>
<p>结构化的数据可以按时间(比如<code>天</code>间隔)成一个文件夹，</p>
<p>比如加载数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> INPATH <span class="string">'path'</span></div><div class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> track_event</div><div class="line"><span class="keyword">PARTITION</span> (dt=<span class="string">'2001-01-01'</span>);</div></pre></td></tr></table></figure></p>
<p>或者命令行加载数据(这个命令可以脚本调用自动化掉)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hive -e &quot;alter table track_event add partition(dt=&apos;%s&apos;);&quot;</div></pre></td></tr></table></figure>
<p>显示现有的表有多少 <code>PARTITIONS</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SHOW PARTITIONS track_event;</div><div class="line">1	dt=16-07-08</div><div class="line">2	dt=16-07-09</div><div class="line">3	dt=16-07-10</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>查询实例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> eventable_id, user_id, created_at </div><div class="line"><span class="keyword">FROM</span> hive.track_event_data.track_event </div><div class="line"><span class="keyword">where</span> dt&gt;=<span class="string">'16-10-01'</span> // <span class="keyword">PARTITIONS</span> 条件</div></pre></td></tr></table></figure></p>
<p><img src="http://ww3.sinaimg.cn/large/63fe561egw1f9n6gniox3j21kw0jl41u.jpg" alt="web ui 的 presto查询"></p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><script src="https://gist.github.com/M2shad0w/f08df53177f3dabe910725d5396cfbcb.js"></script>


<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/bingduanlbd/article/details/52076219" target="_blank" rel="external">http://blog.csdn.net/bingduanlbd/article/details/52076219</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;headerlink&quot; title=&quot;迁移&quot;&gt;&lt;/a&gt;迁移&lt;/h3&gt;&lt;p&gt;所有的日志结构化，落地到 &lt;code&gt;HDFS&lt;/code&gt; 之后，想着提供一个供运营查询的方式，上篇文章介绍了 facebook 的 &lt;a href=&quot;http://m2shad0w.com/2016/11/09/presto-小试/index.html&quot;&gt;&lt;code&gt;presto&lt;/code&gt;链接&lt;/a&gt;, 这篇就是数据源的自动化准备的一个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="同步" scheme="http://m2shad0w.com/categories/%E5%90%8C%E6%AD%A5/"/>
    
      <category term="ETL" scheme="http://m2shad0w.com/categories/%E5%90%8C%E6%AD%A5/ETL/"/>
    
    
      <category term="python" scheme="http://m2shad0w.com/tags/python/"/>
    
      <category term="hive" scheme="http://m2shad0w.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>各常用类源配置</title>
    <link href="http://m2shad0w.com/2016/11/09/%E5%90%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <id>http://m2shad0w.com/2016/11/09/各常用类源配置/</id>
    <published>2016-11-09T08:10:08.000Z</published>
    <updated>2016-11-10T09:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>开发中，不免需要下载各种依赖包，这些包大多在墙外，现在配置下载源<a href="https://mirrors.ustc.edu.cn/" target="_blank" rel="external">中科大源－比较全</a>，加速开发。</p>
<a id="more"></a>
<h3 id="pypi-源"><a href="#pypi-源" class="headerlink" title="pypi 源"></a>pypi 源</h3><p>参考<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/pypi" target="_blank" rel="external">科大 wiki</a></p>
<p>在用户目录下 $HOME/ 创建 <code>.pip/pip.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(cobraenv)➜  webserver git:(master) cat ~/.pip/pip.conf</div><div class="line">[global]</div><div class="line">timeout = 60</div><div class="line">index-url = https://pypi.mirrors.ustc.edu.cn/simple</div></pre></td></tr></table></figure>
<h3 id="brew-源"><a href="#brew-源" class="headerlink" title="brew 源"></a>brew 源</h3><p>参考<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="external">科大 wiki</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure>
<p>homebrew-core<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</div><div class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</div></pre></td></tr></table></figure></p>
<h3 id="ruby-源"><a href="#ruby-源" class="headerlink" title="ruby 源"></a>ruby 源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(cobraenv)➜  Homebrew git:(stable) gem sources  #列出默认源</div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://ruby.taobao.org/</div><div class="line">https://mirrors.ustc.edu.cn/rubygems/</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem sources --remove https://rubygems.org/  #移除默认源</div><div class="line">gem sources -a https://mirrors.ustc.edu.cn/rubygems/  #添加科大源</div></pre></td></tr></table></figure>
<h3 id="maven-源"><a href="#maven-源" class="headerlink" title="maven 源"></a>maven 源</h3><p>vi ~/.m2/setting.xml 在 <code>section</code> <code>&lt;mirror&gt;</code> 中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mirror&gt;  </div><div class="line">  &lt;id&gt;alimaven&lt;/id&gt;  </div><div class="line">  &lt;name&gt;aliyun maven&lt;/name&gt;  </div><div class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </div><div class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </div><div class="line">&lt;/mirror&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;开发中，不免需要下载各种依赖包，这些包大多在墙外，现在配置下载源&lt;a href=&quot;https://mirrors.ustc.edu.cn/&quot;&gt;中科大源－比较全&lt;/a&gt;，加速开发。&lt;/p&gt;
    
    </summary>
    
      <category term="data" scheme="http://m2shad0w.com/categories/data/"/>
    
      <category term="time" scheme="http://m2shad0w.com/categories/data/time/"/>
    
    
      <category term="data" scheme="http://m2shad0w.com/tags/data/"/>
    
      <category term="source" scheme="http://m2shad0w.com/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>presto_小试</title>
    <link href="http://m2shad0w.com/2016/11/09/presto-%E5%B0%8F%E8%AF%95/"/>
    <id>http://m2shad0w.com/2016/11/09/presto-小试/</id>
    <published>2016-11-09T03:50:55.000Z</published>
    <updated>2016-11-09T06:28:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul>
<li>操作系统：<code>centos 7 x86_64 x86_64 x86_64 GNU/Linux</code> 3台</li>
<li>hadoop 集群：<code>Hadoop 2.7.1.2.4.2.0-258</code></li>
<li>jdk：<code>java version &quot;1.8.0_60&quot;</code></li>
</ul>
<a id="more"></a>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>参考 <a href="http://prestodb.io/docs/current/installation.html" target="_blank" rel="external">http://prestodb.io/docs/current/installation.html</a></p>
<p>下载最新 <a href="https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.156/presto-server-0.156.tar.gz" target="_blank" rel="external">presto-server-0.156.tar.gz</a> 安装包。</p>
<p>目录结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">presto-server-0.155</div><div class="line">├── bin</div><div class="line">├── etc</div><div class="line">├── lib</div><div class="line">├── NOTICE</div><div class="line">├── plugin</div><div class="line">├── presto</div><div class="line">└── README.txt</div></pre></td></tr></table></figure>
<h3 id="配置-presto"><a href="#配置-presto" class="headerlink" title="配置 presto"></a>配置 presto</h3><p>目录 <code>etc</code> 中 <code>config.properties</code> 是 presto 的基本配置文件，有两种角色，协调器（coordinator）， workers</p>
<p>3台机器，在一台机器上同时配置协调器和 workers， 另两台只配置 workers</p>
<p>coordinator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">coordinator=true</div><div class="line">node-scheduler.include-coordinator=true</div><div class="line">http-server.http.port=28080</div><div class="line">query.max-memory=6GB</div><div class="line">query.max-memory-per-node=2GB</div><div class="line">discovery-server.enabled=true</div><div class="line">discovery.uri=http://hostname:28080</div></pre></td></tr></table></figure></p>
<p>workers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">coordinator=true</div><div class="line">node-scheduler.include-coordinator=true</div><div class="line">http-server.http.port=28080</div><div class="line">query.max-memory=6GB</div><div class="line">query.max-memory-per-node=2GB</div><div class="line">discovery-server.enabled=true</div><div class="line">discovery.uri=http://hostname:28080</div></pre></td></tr></table></figure></p>
<p>配置 <code>etc/node.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node.environment=production</div><div class="line">node.id=ffffffff-ffff-ffff-ffff-ffffffffffff</div><div class="line">node.data-dir=/var/presto/data</div></pre></td></tr></table></figure>
<p>主意其中 <code>node-id</code> 的值， 每台应该是不一样的<br>可以用一下命令生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ uuidgen</div><div class="line">4a51e7b6-cc3b-4aeb-993c-33cbc2682fcf</div></pre></td></tr></table></figure>
<p>jvm 配置 <code>etc/jvm.config</code> (直接推荐的配置)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-server</div><div class="line">-Xmx16G</div><div class="line">-XX:+UseG1GC</div><div class="line">-XX:G1HeapRegionSize=32M</div><div class="line">-XX:+UseGCOverheadLimit</div><div class="line">-XX:+ExplicitGCInvokesConcurrent</div><div class="line">-XX:+HeapDumpOnOutOfMemoryError</div><div class="line">-XX:OnOutOfMemoryError=kill -9 %p</div></pre></td></tr></table></figure>
<p>设置 <code>connector</code></p>
<p>因为主要是 <code>hive</code> 的查询，所以只配置了 <code>hive</code>，实际上 presto 支持多种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">connector.name=hive-hadoop2</div><div class="line">hive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml</div><div class="line">hive.metastore.uri=thrift://host:9083</div></pre></td></tr></table></figure>
<h3 id="运行-presto"><a href="#运行-presto" class="headerlink" title="运行 presto"></a>运行 presto</h3><p>在三台机器上依次运行 <code>bin/launcher run</code>, 酷炫的界面出现了。可以实时的展示查询的情况。</p>
<p><img src="http://ww2.sinaimg.cn/large/63fe561egw1f9ltx98rywj21kw0swdnq.jpg" alt=""></p>
<h3 id="测试-Presto-CLI"><a href="#测试-Presto-CLI" class="headerlink" title="测试 Presto CLI"></a>测试 Presto CLI</h3><p>下载 <a href="https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.156/presto-cli-0.156-executable.jar" target="_blank" rel="external">presto-cli-0.156-executable.jar</a>,<br>重命名为 <code>presto</code>, 加上可执行的权限 <code>chmod +x</code>, 执行。</p>
<ol>
<li>登陆 presto cli<br> <code>./presto --server hostname:28080 --catalog hive --schema default</code></li>
<li>显示有那些现有的 <code>schema</code><br> <code>show schema;</code></li>
<li>切换到对应的 <code>schema</code><br> <code>use track_event_data;</code></li>
<li><p>查询(字符串单引号)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select c.eventable_type, count(*) as top</div><div class="line">from track_event_2016_07_21 as c</div><div class="line">where c.eventable_type = &apos;Example&apos;</div><div class="line">group by c.eventable_type</div><div class="line">order by top</div><div class="line">desc;</div></pre></td></tr></table></figure>
</li>
<li><p>速度(多次查询有 cache)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> eventable_type |  top</div><div class="line">----------------+-------</div><div class="line"> Example        | 26287</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Query 20161104_084407_00087_c4yiu, FINISHED, 1 node</div><div class="line">Splits: 27 total, 27 done (100.00%)</div><div class="line">0:03 [4.51M rows, 790MB] [1.61M rows/s, 281MB/s]</div></pre></td></tr></table></figure>
</li>
<li><p>退出</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
</li>
</ol>
<p>感人的速度</p>
<h3 id="哪些团队在使用-presto"><a href="#哪些团队在使用-presto" class="headerlink" title="哪些团队在使用 presto"></a>哪些团队在使用 presto</h3><p>airbnb, jd, meituan, facebook, hunliji etc</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下一步在 presto 上套一个 <code>web ui</code>, 这样就可以给运营运行一些即时查询了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作系统：&lt;code&gt;centos 7 x86_64 x86_64 x86_64 GNU/Linux&lt;/code&gt; 3台&lt;/li&gt;
&lt;li&gt;hadoop 集群：&lt;code&gt;Hadoop 2.7.1.2.4.2.0-258&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jdk：&lt;code&gt;java version &amp;quot;1.8.0_60&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="sql" scheme="http://m2shad0w.com/categories/sql/"/>
    
      <category term="dataMining" scheme="http://m2shad0w.com/categories/sql/dataMining/"/>
    
    
      <category term="bigdata" scheme="http://m2shad0w.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>tornado.web日志logger配置</title>
    <link href="http://m2shad0w.com/2016/07/21/tornado-web%E6%97%A5%E5%BF%97logger%E9%85%8D%E7%BD%AE/"/>
    <id>http://m2shad0w.com/2016/07/21/tornado-web日志logger配置/</id>
    <published>2016-07-21T09:27:20.000Z</published>
    <updated>2016-08-22T09:17:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="web-logger"><a href="#web-logger" class="headerlink" title="web logger"></a>web logger</h3><p>提供的用户画像api需要被业务调用，并发量就会比较高了。web容器必须将日志配好，以供性能调优。</p>
<a id="more"></a>
<p><a href="http://old.sebug.net/paper/books/tornado/#_10" target="_blank" rel="external">Tornado </a> 是一个非阻塞式的web服务器。每秒可以处理数以千计的连接，在我的实际应用中主要是用来做数据api的(编程语言是python，比较轻快)。<a href="http://www.tornadoweb.org/en/stable/web.html" target="_blank" rel="external">简介</a></p>
<h3 id="logger配置与每日分割"><a href="#logger配置与每日分割" class="headerlink" title="logger配置与每日分割"></a>logger配置与每日分割</h3><p><a href="http://guoze.me/2015/01/31/tornado-log-perday/" target="_blank" rel="external">参考文章</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># logging.yaml</span></div><div class="line"></div><div class="line">version: 1</div><div class="line">disable_existing_loggers: <span class="literal">false</span></div><div class="line">formatters:</div><div class="line">  simple:</div><div class="line">    format: <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></div><div class="line"></div><div class="line">loggers:</div><div class="line">  all:</div><div class="line">    handlers: [all]</div><div class="line">    propagate: <span class="literal">false</span></div><div class="line">  tornado:</div><div class="line">    handlers: [all]</div><div class="line">    propagate: <span class="literal">false</span></div><div class="line"></div><div class="line">handlers:</div><div class="line">  console:</div><div class="line">    class: logging.StreamHandler</div><div class="line">    level: INFO</div><div class="line">    formatter: simple</div><div class="line">    stream: ext://sys.stdout</div><div class="line">  all:</div><div class="line">    class: logging.handlers.TimedRotatingFileHandler</div><div class="line">    level: INFO</div><div class="line">    formatter: simple</div><div class="line">    when: midnight</div><div class="line">    filename: ./logs/server.log</div><div class="line"></div><div class="line">root:</div><div class="line">  level: INFO</div><div class="line">  handlers: [console, all]</div><div class="line">  propagate: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>将配置文件放在web根目录下，在web server中引入 <code>import logging, yaml, logging.config</code></p>
<p>如果缺少什么，就按错误日志，安装相应的依赖包</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;web-logger&quot;&gt;&lt;a href=&quot;#web-logger&quot; class=&quot;headerlink&quot; title=&quot;web logger&quot;&gt;&lt;/a&gt;web logger&lt;/h3&gt;&lt;p&gt;提供的用户画像api需要被业务调用，并发量就会比较高了。web容器必须将日志配好，以供性能调优。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://m2shad0w.com/categories/web/"/>
    
    
      <category term="data" scheme="http://m2shad0w.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>sparkStream持久化设计</title>
    <link href="http://m2shad0w.com/2016/07/20/sparkStream%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
    <id>http://m2shad0w.com/2016/07/20/sparkStream持久化设计/</id>
    <published>2016-07-20T11:27:21.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据批处理"><a href="#数据批处理" class="headerlink" title="数据批处理"></a>数据批处理</h3><p>现在有一种业务，数据需要在较短的时间内处理一下， spark Stream 是一个不错的选择。</p>
<a id="more"></a>
<p>数据流基本按照官网给的图走的。</p>
<p><img src="http://ww2.sinaimg.cn/large/63fe561egw1f60lw5yta2j20wk0c6q50.jpg" alt="spark stream 数据流图"></p>
<p>从<code>flume</code>收集日志，<code>sink</code>到<code>kafka</code>, <code>kafka</code>的消息被 <code>spark stream</code> 批处理消费掉。</p>
<h3 id="批处理的数据被存到外部系统"><a href="#批处理的数据被存到外部系统" class="headerlink" title="批处理的数据被存到外部系统"></a>批处理的数据被存到外部系统</h3><p>在业务中， 外部系统是mysql， 怎么高效的存储呢？</p>
<p><a href="https://spark.apache.org/docs/latest/streaming-programming-guide.html#design-patterns-for-using-foreachrdd" target="_blank" rel="external">在spark的官网中提供了思路</a></p>
<p>用 <code>dstream.foreachRDD</code> 的算子， 你有可能这样写</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dstream.foreachRDD(rdd =&gt; &#123;</div><div class="line">  <span class="keyword">val</span> connection = createNewConnection()  <span class="comment">// executed at the driver</span></div><div class="line">  rdd.foreach(record =&gt; &#123;</div><div class="line">      connection.send(record) <span class="comment">// executed at the worker</span></div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但是这样写会报序列化的错误，提高系统的吞吐量，更好的办法是利用 <code>rdd.foreachPartition</code> 的方法。<br>为RDD的每个partition创建一个连接对象</p>
<p>类似如下这种方法</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dstream.foreachRDD(rdd =&gt; &#123;</div><div class="line">      rdd.foreachPartition(partitionOfRecords =&gt; &#123;</div><div class="line">          <span class="keyword">val</span> connection = createNewConnection()</div><div class="line">          partitionOfRecords.foreach(record =&gt; connection.send(record))</div><div class="line">          connection.close()</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>还有更好的方案是创建一个静态的，懒加载的连接对象，节省进一步的开销</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dstream.foreachRDD(rdd =&gt; &#123;</div><div class="line">      rdd.foreachPartition(partitionOfRecords =&gt; &#123;</div><div class="line">          // ConnectionPool is a static, lazily initialized pool of connections</div><div class="line">          val connection = ConnectionPool.getConnection()</div><div class="line">          partitionOfRecords.foreach(record =&gt; connection.send(record))</div><div class="line">          ConnectionPool.returnConnection(connection)  // return to the pool for future reuse</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h3 id="附送python实例"><a href="#附送python实例" class="headerlink" title="附送python实例"></a>附送python实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        TRACK_HOST = $TRACK_HOST</div><div class="line">        TRACK_USER = $TRACK_USER</div><div class="line">        TRACK_PASSWD = $TRACK_PASSWD</div><div class="line">        TRACK_DB = $TRACK_DB</div><div class="line">        self.pool = PooledDB(MySQLdb, <span class="number">2</span>, host=TRACK_HOST, user=TRACK_USER, passwd=TRACK_PASSWD, db=TRACK_DB, port=<span class="number">3306</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnection</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.pool.connection()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnConnection</span><span class="params">(self, connection)</span>:</span></div><div class="line">        <span class="keyword">return</span> connection.close()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	balabala</div><div class="line">	...</div><div class="line">	counts.foreachRDD(<span class="keyword">lambda</span> rdd: rdd.foreachPartition(send_partition))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_partition</span><span class="params">(data)</span>:</span></div><div class="line">   	<span class="keyword">try</span>:</div><div class="line">	    c = ConnectionPool()</div><div class="line">	    conn = c.getConnection()</div><div class="line">	    cur = conn.cursor()</div><div class="line">	    <span class="keyword">for</span> record <span class="keyword">in</span> data:</div><div class="line">	    	balabala</div><div class="line">	    	...</div><div class="line">	    c.returnConnection(conn)</div><div class="line">	<span class="keyword">except</span> Exception, e:</div><div class="line">        <span class="keyword">print</span> (e)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connection</span><span class="params">()</span>:</span></div><div class="line">        track_host = <span class="string">""</span></div><div class="line">        track_user = <span class="string">""</span></div><div class="line">        track_password = <span class="string">""</span></div><div class="line">        track_db = <span class="string">""</span></div><div class="line">        <span class="keyword">import</span> MySQLdb</div><div class="line">        <span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</div><div class="line">        pool = PooledDB(MySQLdb, <span class="number">2</span>, host=track_host, user=track_user, passwd=track_password, db=track_db, port=<span class="number">3306</span>)</div><div class="line">        <span class="keyword">return</span> pool.connection()</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_connection</span><span class="params">(connection)</span>:</span></div><div class="line">        <span class="keyword">return</span> connection.close()</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/spark-streaming/basic-concepts/output-operations-on-DStreams.html" target="_blank" rel="external">https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/spark-streaming/basic-concepts/output-operations-on-DStreams.html</a><br><a href="https://spark.apache.org/docs/latest/streaming-programming-guide.html#design-patterns-for-using-foreachrdd" target="_blank" rel="external">https://spark.apache.org/docs/latest/streaming-programming-guide.html#design-patterns-for-using-foreachrdd</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据批处理&quot;&gt;&lt;a href=&quot;#数据批处理&quot; class=&quot;headerlink&quot; title=&quot;数据批处理&quot;&gt;&lt;/a&gt;数据批处理&lt;/h3&gt;&lt;p&gt;现在有一种业务，数据需要在较短的时间内处理一下， spark Stream 是一个不错的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
    
      <category term="spark" scheme="http://m2shad0w.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>rinetd端口转发工具</title>
    <link href="http://m2shad0w.com/2016/07/13/rinetd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://m2shad0w.com/2016/07/13/rinetd端口转发工具/</id>
    <published>2016-07-13T09:04:50.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rinetd端口转发工具"><a href="#rinetd端口转发工具" class="headerlink" title="rinetd端口转发工具"></a>rinetd端口转发工具</h3><p>端口转发是比较实用的，内网服务器，某些机器并不想直接暴露在外边，就可以通过端口转发到跳板机上。</p>
<a id="more"></a>
<p>从<a href="https://www.boutell.com/rinetd/" target="_blank" rel="external">工具地址</a> 下载</p>
<p><code>wget $url</code></p>
<p>解压压缩包，并且进入工作目录，修改端口范围</p>
<p><code>sed -i &#39;s/65536/65535/g&#39; rinetd.c</code></p>
<p>接着执行</p>
<p><code>mkdir /usr/man&amp;&amp;make&amp;&amp;make install</code></p>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p><code>vi /etc/rinetd.conf</code></p>
<p>输入</p>
<p><code>$src $port $des $port</code></p>
<p>启动</p>
<p><code>rinetd</code></p>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p><code>echo rinetd &gt;&gt;/etc/rc.local</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;rinetd端口转发工具&quot;&gt;&lt;a href=&quot;#rinetd端口转发工具&quot; class=&quot;headerlink&quot; title=&quot;rinetd端口转发工具&quot;&gt;&lt;/a&gt;rinetd端口转发工具&lt;/h3&gt;&lt;p&gt;端口转发是比较实用的，内网服务器，某些机器并不想直接暴露在外边，就可以通过端口转发到跳板机上。&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
    
      <category term="rinetd" scheme="http://m2shad0w.com/tags/rinetd/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装nginx</title>
    <link href="http://m2shad0w.com/2016/07/11/centos7%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://m2shad0w.com/2016/07/11/centos7安装nginx/</id>
    <published>2016-07-11T07:21:19.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos7安装nginx"><a href="#centos7安装nginx" class="headerlink" title="centos7安装nginx"></a>centos7安装nginx</h3><ul>
<li><p>在yum的仓库中添加nginx的源</p>
<p>  <code>cd /etc/yum.repos.d/</code><br>  <code>vi nginx.repo</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[nginx]</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>添加签名</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://nginx.org/keys/nginx_signing.key</div></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start nginx</div></pre></td></tr></table></figure>
</li>
<li><p>使能开机启动</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable nginx.service</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://mos.meituan.com/library/18/how-to-install-lnmp-on-centos7/" target="_blank" rel="external">美团－在CentOS 7上搭建LNMP环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;centos7安装nginx&quot;&gt;&lt;a href=&quot;#centos7安装nginx&quot; class=&quot;headerlink&quot; title=&quot;centos7安装nginx&quot;&gt;&lt;/a&gt;centos7安装nginx&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在yum的仓库中添加nginx的源&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;cd /etc/yum.repos.d/&lt;/code&gt;&lt;br&gt;  &lt;code&gt;vi nginx.repo&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[nginx]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name=nginx repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baseurl=http://nginx.org/packages/centos/7/$basearch/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gpgcheck=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;enabled=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://m2shad0w.com/categories/nginx/"/>
    
    
      <category term="centos" scheme="http://m2shad0w.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>缓存jar提高spark-on-yarn的执行速度</title>
    <link href="http://m2shad0w.com/2016/07/09/%E7%BC%93%E5%AD%98jar%E6%8F%90%E9%AB%98spark-on-yarn%E7%9A%84%E4%B9%8B%E8%A1%8C%E9%80%9F%E5%BA%A6/"/>
    <id>http://m2shad0w.com/2016/07/09/缓存jar提高spark-on-yarn的之行速度/</id>
    <published>2016-07-09T07:44:23.000Z</published>
    <updated>2016-08-22T09:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spark-on-yarn"><a href="#spark-on-yarn" class="headerlink" title="spark-on-yarn"></a>spark-on-yarn</h3><p>将job提交到 <code>yarn</code> 上，整个job的执行时间明显多了很多，想着优化一下。</p>
<p>从下面这张图可以看到，有一个上传<code>spark jar</code>的过程，这个包很大170多M，必然会浪费时间。</p>
<p>所以通过缓存jar来提高<code>spark on yarn</code>的执行速度。</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/63fe561egw1f5nptf0dsbj21kw037419.jpg" alt="上传jar记录"></p>
<h3 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h3><ul>
<li><p>在hdfs上创建公共jar包的一个路径</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hadoop fs -mkdir /spark-lib</div><div class="line">hadoop fs -chmod 755 /spark-lib <span class="comment"># 修改目录权限</span></div></pre></td></tr></table></figure>
</li>
<li><p>将jar包put到新建的路径中去</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -put <span class="variable">$yourpath</span></div></pre></td></tr></table></figure>
</li>
<li><p>在spark-default.conf中设置spark.yarn.jar指定到 hdfs中spark-assembly包的绝对路径</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark.yarn.jar <span class="variable">$yourpath</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/xueba207/article/details/50440625" target="_blank" rel="external">http://blog.csdn.net/xueba207/article/details/50440625</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;spark-on-yarn&quot;&gt;&lt;a href=&quot;#spark-on-yarn&quot; class=&quot;headerlink&quot; title=&quot;spark-on-yarn&quot;&gt;&lt;/a&gt;spark-on-yarn&lt;/h3&gt;&lt;p&gt;将job提交到 &lt;code&gt;yarn&lt;/code&gt; 上，整个job的执行时间明显多了很多，想着优化一下。&lt;/p&gt;
&lt;p&gt;从下面这张图可以看到，有一个上传&lt;code&gt;spark jar&lt;/code&gt;的过程，这个包很大170多M，必然会浪费时间。&lt;/p&gt;
&lt;p&gt;所以通过缓存jar来提高&lt;code&gt;spark on yarn&lt;/code&gt;的执行速度。&lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="http://m2shad0w.com/categories/spark/"/>
    
    
      <category term="bigdata" scheme="http://m2shad0w.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>修改yarn-web-ui时区</title>
    <link href="http://m2shad0w.com/2016/07/09/%E4%BF%AE%E6%94%B9yarn-web-ui%E6%97%B6%E5%8C%BA/"/>
    <id>http://m2shad0w.com/2016/07/09/修改yarn-web-ui时区/</id>
    <published>2016-07-09T06:05:20.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="yarn-web-ui时区显示不对"><a href="#yarn-web-ui时区显示不对" class="headerlink" title="yarn-web-ui时区显示不对"></a>yarn-web-ui时区显示不对</h3><p>在运行spark on yarn 程序中，job偶尔会失败，加上job量又比较多，web－ui的时区不矫正，简直对给定位问题带来了困难。</p>
<p>下面就是我实践校正时区的一个过程。</p>
<a id="more"></a>
<p>查看一下hadoop的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hadoop version</div><div class="line">Hadoop 2.6.3</div><div class="line">Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r cc865b490b9a6260e9611a5b8633cab885b3d247</div><div class="line">Compiled by jenkins on 2015-12-18T01:19Z</div><div class="line">Compiled with protoc 2.5.0</div><div class="line">From <span class="built_in">source</span> with checksum 722f77f825e326e13a86ff62b34ada</div><div class="line">This <span class="built_in">command</span> was run using /opt/hadoop/share/hadoop/common/hadoop-common-2.6.3.jar</div></pre></td></tr></table></figure>
<p>得知安装的版本是2.6.3, 编译的用的是protoc 2.5.0</p>
<p>从<a href="https://issues.apache.org/jira/browse/YARN-1998" target="_blank" rel="external">https://issues.apache.org/jira/browse/YARN-1998</a>得知这是一个bug(14年已经修复了，但是2.6.3版本还是出现了)。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><a href="https://issues.apache.org/jira/secure/attachment/12642581/YARN-1998.patch" target="_blank" rel="external">https://issues.apache.org/jira/secure/attachment/12642581/YARN-1998.patch</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Index: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/webapps/<span class="keyword">static</span>/yarn.dt.plugins.js</div><div class="line">===================================================================</div><div class="line">--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/webapps/<span class="keyword">static</span>/yarn.dt.plugins.js	(revision <span class="number">1591171</span>)</div><div class="line">+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/webapps/<span class="keyword">static</span>/yarn.dt.plugins.js	(working copy)</div><div class="line">@@ <span class="number">-78</span>,<span class="number">7</span> +<span class="number">78</span>,<span class="number">7</span> @@</div><div class="line">     <span class="keyword">if</span>(data === <span class="string">'0'</span>|| data === <span class="string">'-1'</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"N/A"</span>;</div><div class="line">     &#125;</div><div class="line">-    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(data)).toUTCString();</div><div class="line">+    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(data)).toLocaleString();</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 'sort', 'type' and undefined all just use the number</span></div><div class="line">   <span class="comment">// If date is 0, then for purposes of sorting it should be consider max_int</span></div></pre></td></tr></table></figure>
<h3 id="找hadoop2-6-3分支，修改yarn-dt-plugins-js"><a href="#找hadoop2-6-3分支，修改yarn-dt-plugins-js" class="headerlink" title="找hadoop2.6.3分支，修改yarn.dt.plugins.js"></a>找hadoop2.6.3分支，修改yarn.dt.plugins.js</h3><p>首先需要安装对应的protobuf，<a href="https://github.com/google/protobuf/releases?after=v3.0.0-alpha-4" target="_blank" rel="external">protobuf-2.5.0.tar.gz</a>, 下载地址<a href="https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz" target="_blank" rel="external">click</a></p>
<p><code>tar -xzvf ./protobuf-2.5.0.tar.gz</code><br><code>cd protobuf-2.5.0</code><br><code>make</code><br><code>make check</code><br><code>make install</code></p>
<p>一气呵成安装好，并确认版本</p>
<p><code>protoc --version</code></p>
<p>从hadoop github仓库下载最新源码， 切换到2.6.3分支，进入<code>hadoop-yarn-common</code>目录，<br>找到<code>yarn.dt.plugins.js</code>中的<code>renderHadoopDate</code>函数，返回值修改成</p>
<p><code>return new Date(parseInt(data)).toLocaleString()</code></p>
<p>mvn编译打包</p>
<p><code>mvn clean package -DskipTests</code></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://my.oschina.net/allman90/blog/486768" target="_blank" rel="external">http://my.oschina.net/allman90/blog/486768</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;yarn-web-ui时区显示不对&quot;&gt;&lt;a href=&quot;#yarn-web-ui时区显示不对&quot; class=&quot;headerlink&quot; title=&quot;yarn-web-ui时区显示不对&quot;&gt;&lt;/a&gt;yarn-web-ui时区显示不对&lt;/h3&gt;&lt;p&gt;在运行spark on yarn 程序中，job偶尔会失败，加上job量又比较多，web－ui的时区不矫正，简直对给定位问题带来了困难。&lt;/p&gt;
&lt;p&gt;下面就是我实践校正时区的一个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="yarn" scheme="http://m2shad0w.com/categories/yarn/"/>
    
    
      <category term="bigdata" scheme="http://m2shad0w.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>mysql导入之行sql语句</title>
    <link href="http://m2shad0w.com/2016/06/21/mysql%E5%AF%BC%E5%85%A5%E4%B9%8B%E8%A1%8Csql%E8%AF%AD%E5%8F%A5/"/>
    <id>http://m2shad0w.com/2016/06/21/mysql导入之行sql语句/</id>
    <published>2016-06-21T12:14:57.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql导入之行sql"><a href="#mysql导入之行sql" class="headerlink" title="mysql导入之行sql"></a>mysql导入之行sql</h3><p>一些常用的sql，写成文件形式，在mysql中导入，可以批量生成表</p>
<a id="more"></a>
<p>在迁移Azkaban的时候，就有这个过程。 做一下简单的记录。</p>
<p><code>Mysql&gt;source 【sql脚本文件的路径全名】</code></p>
<p><code>Mysql&gt;\. 【sql脚本文件的路径全名】</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql导入之行sql&quot;&gt;&lt;a href=&quot;#mysql导入之行sql&quot; class=&quot;headerlink&quot; title=&quot;mysql导入之行sql&quot;&gt;&lt;/a&gt;mysql导入之行sql&lt;/h3&gt;&lt;p&gt;一些常用的sql，写成文件形式，在mysql中导入，可以批量生成表&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://m2shad0w.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://m2shad0w.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>flume多channel、slink配置</title>
    <link href="http://m2shad0w.com/2016/06/08/flume%E5%A4%9Achannel%E3%80%81slink%E9%85%8D%E7%BD%AE/"/>
    <id>http://m2shad0w.com/2016/06/08/flume多channel、slink配置/</id>
    <published>2016-06-08T05:36:56.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://flume.apache.org/FlumeUserGuide.html#configuration" target="_blank" rel="external">https://flume.apache.org/FlumeUserGuide.html#configuration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://flume.apache.org/FlumeUserGuide.html#configur
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在服务器上使用shadowsocks客户端</title>
    <link href="http://m2shad0w.com/2016/06/06/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://m2shad0w.com/2016/06/06/在服务器上使用shadowsocks客户端/</id>
    <published>2016-06-06T02:14:53.000Z</published>
    <updated>2016-11-10T09:51:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ss客户端在centos上"><a href="#ss客户端在centos上" class="headerlink" title="ss客户端在centos上"></a>ss客户端在centos上</h3><p>因为在cenots上手动编译hue，需要下载大量的jar包，这段时间开源中国的maven库又维护，无奈只能在centos上也ss代理上网了。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install python-pip    </div><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "server":"x.x.x.x",             #ss服务器IP</div><div class="line">    "server_port":xxx,             #ss服务器端口</div><div class="line">    "local_address": "127.0.0.1",   #本地ip</div><div class="line">    "local_port":1080,              #本地端口</div><div class="line">    "password":"password",          #连接ss密码</div><div class="line">    "timeout":300,                  #等待超时</div><div class="line">    "method":"aes-256-cfb",             #加密方式(与服务器一致)</div><div class="line">    "fast_open": false,             # true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 开启之后，将 fast_open 的配置设置为 true 即可</div><div class="line">    "workers": 1                    # 工作线程数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动-amp-测试"><a href="#启动-amp-测试" class="headerlink" title="启动&amp;测试"></a>启动&amp;测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nohup sslocal -c /etc/shadowsocks.json /dev/null 2&gt;&amp;1 &amp;</div><div class="line">// 然后加入开机自启动</div><div class="line">$ echo &quot; nohup sslocal -c /etc/shadowsocks.json /dev/null 2&gt;&amp;1 &amp;&quot; /etc/rc.local</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps aux |grep sslocal |grep -v &quot;grep&quot;</div><div class="line">root     12936  0.0  0.0 201376  7764 pts/1    S    6月04   0:01 /usr/bin/python /usr/bin/sslocal -c /etc/shadowsocks.json /dev/null</div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jianshu.com/p/f688cdfa6947" target="_blank" rel="external">linux全局代理</a><br><a href="http://overtrue.me/articles/2016/03/shadowsocks-on-server.html" target="_blank" rel="external">http://overtrue.me/articles/2016/03/shadowsocks-on-server.html</a><br><a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/tree/master</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ss客户端在centos上&quot;&gt;&lt;a href=&quot;#ss客户端在centos上&quot; class=&quot;headerlink&quot; title=&quot;ss客户端在centos上&quot;&gt;&lt;/a&gt;ss客户端在centos上&lt;/h3&gt;&lt;p&gt;因为在cenots上手动编译hue，需要下载大量的jar包，这段时间开源中国的maven库又维护，无奈只能在centos上也ss代理上网了。&lt;/p&gt;
    
    </summary>
    
      <category term="shadowssocks" scheme="http://m2shad0w.com/categories/shadowssocks/"/>
    
    
      <category term="shadowsocks" scheme="http://m2shad0w.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>hue编译安装</title>
    <link href="http://m2shad0w.com/2016/06/03/hue%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>http://m2shad0w.com/2016/06/03/hue编译安装/</id>
    <published>2016-06-03T10:02:46.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>yum 安装依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install gmp-devel</div><div class="line">yum install libffi-devel</div><div class="line">yum install krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum list &lt;xxx&gt; # yum list gmp-devel 查看具体包名</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://my.oschina.net/wangjiankui/blog/465827" target="_blank" rel="external">http://my.oschina.net/wangjiankui/blog/465827</a><br><a href="http://cloudera.github.io/hue/docs-3.8.0/manual.html" target="_blank" rel="external">http://cloudera.github.io/hue/docs-3.8.0/manual.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;p&gt;yum 安装依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install gmp-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install libffi-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
      <category term="tools" scheme="http://m2shad0w.com/categories/bigdata/tools/"/>
    
    
      <category term="hue" scheme="http://m2shad0w.com/tags/hue/"/>
    
  </entry>
  
  <entry>
    <title>ambari-agent注册失败</title>
    <link href="http://m2shad0w.com/2016/06/02/ambari-agent%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5/"/>
    <id>http://m2shad0w.com/2016/06/02/ambari-agent注册失败/</id>
    <published>2016-06-02T06:44:16.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ambari"><a href="#ambari" class="headerlink" title="ambari"></a>ambari</h3><p>ambari是一个自动化的部署hadoop生态产品的好工具，这次在搭建线下测试环境的时候正好使用一下，下面将搭建过程中的坑，做一些简单的记录</p>
<a id="more"></a>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>搭建的过程首先参考<a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_start_the_ambari_server.html" target="_blank" rel="external">hortonworks.com的文章</a>的文章.<br>包括</p>
<ol>
<li><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_set_up_password-less_ssh.html" target="_blank" rel="external">无密码登陆</a></li>
<li><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_enable_ntp_on_the_cluster_and_on_the_browser_host.html" target="_blank" rel="external">安装ntp服务，同步时间</a></li>
<li>[安装wget等基本软件]</li>
<li><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_edit_the_host_file.html" target="_blank" rel="external">设置FQDN, DNS</a></li>
<li>[关闭防火墙, selinux]</li>
</ol>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul>
<li>在<code>ambari-server setup</code> 选择数据库时候没有选择默认的<code>postgres</code>, 而选择了<code>mysql</code>，后面<code>ambar-server reset</code> 想重新设置为<code>postgres</code>时候不起作用</li>
<li>centos 的系统语言设置成中文，导致 <code>Registration with the server failed</code>, 将系统语言改成英文就好了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Connection to laboratorio.cetax.com closed.</div><div class="line">SSH command execution finished</div><div class="line">host=laboratorio.cetax.com, exitcode=0</div><div class="line">Command end time 2016-04-29 11:27:04</div><div class="line"> </div><div class="line"> </div><div class="line">Registering with the server...</div><div class="line">Registration with the server failed.</div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.oschina.net/question/2684511_2159089" target="_blank" rel="external">http://www.oschina.net/question/2684511_2159089</a></p>
<p><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_edit_the_host_file.html" target="_blank" rel="external">http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_edit_the_host_file.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ambari&quot;&gt;&lt;a href=&quot;#ambari&quot; class=&quot;headerlink&quot; title=&quot;ambari&quot;&gt;&lt;/a&gt;ambari&lt;/h3&gt;&lt;p&gt;ambari是一个自动化的部署hadoop生态产品的好工具，这次在搭建线下测试环境的时候正好使用一下，下面将搭建过程中的坑，做一些简单的记录&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
    
      <category term="ambari" scheme="http://m2shad0w.com/tags/ambari/"/>
    
  </entry>
  
  <entry>
    <title>python_pkg_resources</title>
    <link href="http://m2shad0w.com/2016/06/02/python-pkg-resources/"/>
    <id>http://m2shad0w.com/2016/06/02/python-pkg-resources/</id>
    <published>2016-06-02T06:10:32.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos网络配置</title>
    <link href="http://m2shad0w.com/2016/05/31/centos%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://m2shad0w.com/2016/05/31/centos网络配置/</id>
    <published>2016-05-31T07:45:23.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos-dvd-iso"><a href="#centos-dvd-iso" class="headerlink" title="centos-dvd-iso"></a>centos-dvd-iso</h3><p>安装了centos－dvd－iso镜像版本，默认boot up的时候竟然网卡没有驱动起来。配置的过程做一下纪录。</p>
<a id="more"></a>
<h3 id="配置sysconfig"><a href="#配置sysconfig" class="headerlink" title="配置sysconfig"></a>配置sysconfig</h3><p>在<code>/etc/sysconfig/network-scripts</code> 修改 <code>ifcfg-enp3s0</code>文件</p>
<p>ifcfg后缀名就是网卡的名<br>可以通过<code>ip add</code>获取</p>
<h3 id="图形化配置"><a href="#图形化配置" class="headerlink" title="图形化配置"></a>图形化配置</h3><p><code>nmtui edit 网卡名</code></p>
<p>依次填写好</p>
<p>ip、网关、dns 等</p>
<p>如图<br><img src="http://ww4.sinaimg.cn/large/63fe561egw1f4emdhg7r4j20s80pyade.jpg" alt=""></p>
<h3 id="重启网络服务生效"><a href="#重启网络服务生效" class="headerlink" title="重启网络服务生效"></a>重启网络服务生效</h3><p><code>service network restart</code></p>
<p>或者</p>
<p><code>systemctl restart network.service</code></p>
<p>安装一些网络工具</p>
<p><code>yum update &amp;&amp; yum install net-tools</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;centos-dvd-iso&quot;&gt;&lt;a href=&quot;#centos-dvd-iso&quot; class=&quot;headerlink&quot; title=&quot;centos-dvd-iso&quot;&gt;&lt;/a&gt;centos-dvd-iso&lt;/h3&gt;&lt;p&gt;安装了centos－dvd－iso镜像版本，默认boot up的时候竟然网卡没有驱动起来。配置的过程做一下纪录。&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://m2shad0w.com/categories/network/"/>
    
    
      <category term="bigdata" scheme="http://m2shad0w.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>zeppelin_data_visualization</title>
    <link href="http://m2shad0w.com/2016/05/26/zeppelin-data-visualization/"/>
    <id>http://m2shad0w.com/2016/05/26/zeppelin-data-visualization/</id>
    <published>2016-05-26T11:41:24.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Multi-purpose-Notebook"><a href="#Multi-purpose-Notebook" class="headerlink" title="Multi-purpose Notebook"></a>Multi-purpose Notebook</h3><p>正如zeppelin主页所说， zeppelin 是一个多目的的文本笔记。你的所有的数据需求都可以在这个笔记中完成。</p>
<ul>
<li>数据喂入</li>
<li>数据发现</li>
<li>数据分析</li>
<li>数据可视化&amp;合作</li>
</ul>
<a id="more"></a>
<h3 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Multi-purpose-Notebook&quot;&gt;&lt;a href=&quot;#Multi-purpose-Notebook&quot; class=&quot;headerlink&quot; title=&quot;Multi-purpose Notebook&quot;&gt;&lt;/a&gt;Multi-purpose Notebook&lt;/h3&gt;&lt;p&gt;正如zeppelin主页所说， zeppelin 是一个多目的的文本笔记。你的所有的数据需求都可以在这个笔记中完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据喂入&lt;/li&gt;
&lt;li&gt;数据发现&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;li&gt;数据可视化&amp;amp;合作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
    
      <category term="data" scheme="http://m2shad0w.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Dato_Machine_Learning</title>
    <link href="http://m2shad0w.com/2016/05/25/Dato-Machine-Learning/"/>
    <id>http://m2shad0w.com/2016/05/25/Dato-Machine-Learning/</id>
    <published>2016-05-25T07:01:23.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="dato"><a href="#dato" class="headerlink" title="dato"></a>dato</h3><p>Dato_Machine_Learning, 使用GraphLab来做一些机器学习。<br><a id="more"></a></p>
<h3 id="user-guide"><a href="#user-guide" class="headerlink" title="user guide"></a>user guide</h3><p><a href="https://dato.com/learn/userguide/install.html" target="_blank" rel="external">https://dato.com/learn/userguide/install.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;dato&quot;&gt;&lt;a href=&quot;#dato&quot; class=&quot;headerlink&quot; title=&quot;dato&quot;&gt;&lt;/a&gt;dato&lt;/h3&gt;&lt;p&gt;Dato_Machine_Learning, 使用GraphLab来做一些机器学习。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://m2shad0w.com/categories/bigdata/"/>
    
    
      <category term="machine_learning" scheme="http://m2shad0w.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>mongodb基础</title>
    <link href="http://m2shad0w.com/2016/05/09/mongodb%E5%9F%BA%E7%A1%80/"/>
    <id>http://m2shad0w.com/2016/05/09/mongodb基础/</id>
    <published>2016-05-09T01:34:40.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nosql之mongodb"><a href="#nosql之mongodb" class="headerlink" title="nosql之mongodb"></a>nosql之mongodb</h3><p>mongodb其实是介于关系型数据库与Nosql 之间的一种数据库, 由于工作需要，正好接触了一下。到现在也有点时间了。<br>在网上找kail的源的时候，看到中科大同学的分享，总结的挺基础的，分享一下。<br><a id="more"></a></p>
<h3 id="mongo-ppt"><a href="#mongo-ppt" class="headerlink" title="mongo ppt"></a>mongo ppt</h3><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/bCfioac6WeYuvY" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/JiahuaZhu3/mongo-61799349" title="Mongo基础" target="_blank">Mongo基础</a> </strong> from <strong><a href="//www.slideshare.net/JiahuaZhu3" target="_blank">Jiahua Zhu</a></strong> </div></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nosql之mongodb&quot;&gt;&lt;a href=&quot;#nosql之mongodb&quot; class=&quot;headerlink&quot; title=&quot;nosql之mongodb&quot;&gt;&lt;/a&gt;nosql之mongodb&lt;/h3&gt;&lt;p&gt;mongodb其实是介于关系型数据库与Nosql 之间的一种数据库, 由于工作需要，正好接触了一下。到现在也有点时间了。&lt;br&gt;在网上找kail的源的时候，看到中科大同学的分享，总结的挺基础的，分享一下。&lt;br&gt;
    
    </summary>
    
      <category term="mongodb" scheme="http://m2shad0w.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://m2shad0w.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>pandas2data</title>
    <link href="http://m2shad0w.com/2016/04/28/pandas2data/"/>
    <id>http://m2shad0w.com/2016/04/28/pandas2data/</id>
    <published>2016-04-28T03:46:39.000Z</published>
    <updated>2016-07-21T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pandas处理数据"><a href="#pandas处理数据" class="headerlink" title="pandas处理数据"></a>pandas处理数据</h3><p>一些数据需要通过pandas聚合，很快就可以给到运营了，少写代码…<br><a id="more"></a></p>
<p>需求中有将几张表中的数据聚合</p>
<p>这几张表都有一个公共的key，但是没法通过一个简单的sql语句完成（跨裤，不在一个地方）<br>这时候就可以通过pandas的DataFrame 的聚合输出</p>
<p><code>from pandas import DataFrame</code></p>
<h3 id="pandas操作文档"><a href="#pandas操作文档" class="headerlink" title="pandas操作文档"></a>pandas操作文档</h3><p><a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#brief-primer-on-merge-methods-relational-algebra" target="_blank" rel="external">官方文档</a></p>
<p>将前面获得的从pymysql中list对象传入DataFrame</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df = DataFrame(result1)</div><div class="line">df2 = DataFrame(result2)</div><div class="line">df3 = DataFrame(result3)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dff = pd.merge(df, df2, how=<span class="string">'left'</span>, on=<span class="string">"id"</span>)</div><div class="line">dff1 = pd.merge(dff, df3, how=<span class="string">'left'</span>, on=<span class="string">"id"</span>)</div></pre></td></tr></table></figure>
<p>聚合之后导出到xlsx</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dff1.to_excel(<span class="string">'foo.xlsx'</span>, sheet_name=<span class="string">'sheet1'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pandas处理数据&quot;&gt;&lt;a href=&quot;#pandas处理数据&quot; class=&quot;headerlink&quot; title=&quot;pandas处理数据&quot;&gt;&lt;/a&gt;pandas处理数据&lt;/h3&gt;&lt;p&gt;一些数据需要通过pandas聚合，很快就可以给到运营了，少写代码…&lt;br&gt;
    
    </summary>
    
      <category term="pandas" scheme="http://m2shad0w.com/categories/pandas/"/>
    
      <category term="dataMining" scheme="http://m2shad0w.com/categories/pandas/dataMining/"/>
    
    
      <category term="python" scheme="http://m2shad0w.com/tags/python/"/>
    
  </entry>
  
</feed>
